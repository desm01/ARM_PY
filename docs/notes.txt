ARM:
Only load / store instructions can access memory. 
Means that incrementing a 32 bit pointer will require more instructions on arm. 
You will need to:
  Load value into register
  Increment the value
  Store result in memory

Less clock cycles per instruction.
ARM has two modes -> ARM mode and thumb mode.
Thumb instructions can either be two or four bytes.

ARM -> Most instructions can be used for conditional execution.
Intel x86 -> Use the little-endian format
Arm -> Was little endian before version 3, since then ARM became bi-endian and features a setting that allows you to switch

Assembly language uses mnemonics -> Easier to remember

Arm also lacks a division instruction.



In HLL you can have variables. In assembly you have registers, variables [Specific ranges in memory] & the stack.

A register is essentially a variable in the chip itself -> Very few registers.

You put variables in addressable memory, there's a lot more bytes in memory than in registers.
Memory and registers are essentially global variables:
  I.E change in one function and you've changed for entire program.

For local variables you can use the Stack:
Stack is a special unit of memory. Uses last in first out approach. There's a special register called a stack pointer. SP -> Contains the address of the top of the stack.

You can push variables onto the top of the stack when you need them, and pop them off when you're done.
Poping restores registers to their original value.
Stack pointer should clean up after itself -> Stack pointer dynamically grows and shrinks over time.

Stacking registers inside a called function is only a guideline and not the law.

A special register known as the PC counter -> Prgram counter stores the address of the next instruction to be executed & updates.

If you set the PC to a completly different address, it redirects the flow of the program.
Technical term is branching. 

Lets you do infinte loops and sub-routines.

Full power of branching comes when certain conditions are met. With that you can build if / else blocks / Loops.
The most common ones are:
Zero (Z) -> If the result of the operation was zero
Negative (N) -> If result was negative (I.E most significant bit set)
Carry Bit (C) -> If the mostest significant bit is set (Like 32 / 64 bit operations)
Arithmetic Overflow (V) -> Like adding two positive numbers and getting a negative number because the result got too big for the registers

These condition flags are stores in the Program Status Register (PSR) -> Each processing instruction will set these flags depending on the outcome of the operation. Special versions of the branch instruction can use these flags to determine whether to make the jump.

Looking at Assembly file:
Four basic types of line formats:
  - (Labels) lines ending with ':' 
  - (Instructions)
  - Lines starting with a period -> Not instructions, they are directives -> Hints to the assembler. Differs per assembler.
  - Lines not starting with a period

Some basic mmnemoincs:
  - add
  - ldr -> Load read something from memory
  - b -> Branch / Jump to this memory address
  - mov -> does an assignment

In GAS, a function is preceded by a number of directives for alignment, code section and instruction set, and a '.global' directive to make it globally visible. And a label to mark the start of the function. Also thumb instructions require a '.thumb_func' or '.code 16' or '.thumb'





























